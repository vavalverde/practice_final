"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.connectField = void 0;
const tslib_1 = require("tslib");
const mapValues_1 = tslib_1.__importDefault(require("lodash/mapValues"));
const react_1 = tslib_1.__importDefault(require("react"));
const context_1 = require("./context");
const useField_1 = require("./useField");
function connectField(Component, options) {
    function Field(props) {
        const [fieldProps, context] = useField_1.useField(props.name, props, options);
        const hasChainName = props.name !== '';
        const anyFlowingPropertySet = Object.keys(context.state).some(key => {
            const next = props[key];
            return next !== null && next !== undefined;
        });
        if (!anyFlowingPropertySet && !hasChainName) {
            return react_1.default.createElement(Component, Object.assign({}, props, fieldProps));
        }
        const nextContext = Object.assign({}, context);
        if (anyFlowingPropertySet) {
            nextContext.state = mapValues_1.default(nextContext.state, (prev, key) => {
                const next = props[key];
                return next !== null && next !== undefined ? !!next : prev;
            });
        }
        if (hasChainName) {
            nextContext.name = nextContext.name.concat(props.name);
        }
        return (react_1.default.createElement(context_1.context.Provider, { value: nextContext },
            react_1.default.createElement(Component, Object.assign({}, props, fieldProps))));
    }
    Field.displayName = `${Component.displayName || Component.name}Field`;
    return Object.assign(Field, { Component, options });
}
exports.connectField = connectField;
